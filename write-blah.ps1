param (
    [string]$OutputFile = "emoji-font-support.md"
)

Clear-Host
Write-Host "Generating emoji font support instructions for jsPDF..." -ForegroundColor Yellow

$MarkdownContent = @"
# üìù Emoji Font Support for jsPDF in Next.js Resume Generator

## Problem

- The UI displays emojis perfectly (üìßüì±üìçüíºüéì‚ö°üèÜüèÖ), but PDF exports using jsPDF show "funky chars" or boxes instead of emojis.
- This is because jsPDF's default fonts do not support emojis and special Unicode characters.
- Current workaround: Using `sanitizeText()` function to remove emojis, but this makes the PDF look dull compared to the beautiful UI.

## Solution: Add Custom Font Support

### Step 1: Download an Emoji-Supporting Font
- **Symbola**: Free font with good emoji support
- **Noto Color Emoji**: Google's emoji font
- **Apple Color Emoji**: If on macOS

### Step 2: Convert Font to jsPDF Format
1. Go to [jsPDF Font Converter](https://rawgit.com/MrRio/jsPDF/master/fontconverter/fontconverter.html)
2. Upload your font file (.ttf or .otf)
3. Download the resulting .js file
4. Place it in your project (e.g., `public/fonts/Symbola.js`)

### Step 3: Update Your Code

#### File: src/components/ResumeGenerator.tsx

```typescript
import jsPDF from 'jspdf';
// Import the converted font file
import '../public/fonts/Symbola.js'; // Adjust path as needed

// In your exportToPDF function, replace the sanitizeText approach:
const exportToPDF = () => {
  const doc = new jsPDF();
  
  // Register and use the emoji font
  doc.setFont('Symbola'); // Use your font's name here
  
  // Now you can use emojis directly without sanitization
  doc.setFontSize(20);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('John Doe', 20, 30);
  
  doc.setFontSize(12);
  doc.setTextColor(107, 114, 128); // Gray color
  doc.text('üìß john@example.com', 20, 40);
  doc.text('üì± (555) 123-4567', 20, 50);
  doc.text('üìç New York, NY', 20, 60);
  
  // Experience section
  doc.setFontSize(16);
  doc.setTextColor(59, 130, 246);
  doc.text('üíº Experience', 20, 80);
  
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.setFont('Symbola', 'bold');
  doc.text('Software Engineer - Tech Corp', 20, 95);
  
  doc.setFont('Symbola', 'normal');
  doc.text('2020 - Present', 20, 105);
  doc.text('React ‚Ä¢ TypeScript ‚Ä¢ Node.js', 20, 115);
  
  // Skills section
  doc.setFontSize(16);
  doc.setTextColor(59, 130, 246);
  doc.text('‚ö° Skills', 20, 140);
  
  doc.setFontSize(10);
  doc.setTextColor(0, 0, 0);
  doc.text('JavaScript ‚Ä¢ Python ‚Ä¢ React ‚Ä¢ Node.js ‚Ä¢ Docker', 20, 155);
  
  // Additional Information
  doc.setFontSize(16);
  doc.setTextColor(59, 130, 246);
  doc.text('üèÜ Additional Information', 20, 180);
  
  doc.setFontSize(10);
  doc.setTextColor(0, 0, 0);
  doc.text('üèÖ Award-winning developer with 5+ years experience', 20, 195);
  doc.text('üèÖ Led team of 10 developers on major project', 20, 205);
  
  doc.save('resume.pdf');
};
```

#### File: package.json (if needed)
```json
{
  "dependencies": {
    "jspdf": "^2.5.1"
  }
}
```

### Step 4: Remove Sanitization Code

Remove or comment out the `sanitizeText` function and its usage:

```typescript
// Remove this function:
// const sanitizeText = (text: string) => {
//   return text
//     .replace(/[üìßüì±üìçüíºüéì‚ö°üèÜüèÖ‚Ä¢]/g, '')
//     .replace(/[^\x00-\x7F]/g, '');
// };

// And remove sanitizeText() calls from all text rendering
```

## Testing

1. **Local Testing**: Run `npm run dev` and test PDF export
2. **Font Loading**: Check browser console for any font loading errors
3. **Deployment**: Ensure the font file is included in your build output

## Troubleshooting

- **Font not loading**: Check the import path and file location
- **Still showing boxes**: Verify the font name in `setFont()` matches the converted font
- **Build errors**: Make sure the font file is in the correct public directory

## Alternative: Font Loading at Runtime

If you prefer to load the font dynamically:

```typescript
// Load font at runtime
const loadFont = async () => {
  const response = await fetch('/fonts/Symbola.js');
  const fontData = await response.text();
  // Register with jsPDF
  // (Implementation depends on jsPDF version)
};
```

## Notes

- The font name in `setFont()` must match the name used in the converted font file
- Test with a small subset of emojis first before applying to the entire resume
- Consider font file size - emoji fonts can be large
- Backup your current working code before making these changes

---
*Generated by write-blah.ps1 for Resume Generator emoji font support*
"@

try {
    $MarkdownContent | Out-File -FilePath $OutputFile -Encoding UTF8 -Force
    Write-Host "`n‚úÖ Success! Emoji font support instructions written to '$OutputFile'" -ForegroundColor Green
    Write-Host "üì¶ File size: $((Get-Item $OutputFile).Length) bytes" -ForegroundColor Cyan
    Write-Host "`nüìù Next steps:" -ForegroundColor Yellow
    Write-Host "   1. Download an emoji font (Symbola recommended)" -ForegroundColor White
    Write-Host "   2. Convert it using jsPDF font converter" -ForegroundColor White
    Write-Host "   3. Add the .js file to your project" -ForegroundColor White
    Write-Host "   4. Update your ResumeGenerator.tsx code" -ForegroundColor White
}
catch {
    Write-Error "‚ùå Failed to write output file '$OutputFile': $($_.Exception.Message)"
    exit 1
}
