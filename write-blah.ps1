param (
    [string]$OutputFile = "resumaker-source-code.md"
)

Clear-Host
Write-Host "Gathering Resume Maker source code files..." -ForegroundColor Yellow

# Define source directories and file extensions
$SourceDirs = @(
    "src",
    "lib",
    "public"
)
$FileExtensions = @("*.tsx", "*.ts", "*.js", "*.jsx", "*.css", "*.mjs", "*.json", "*.md")

# Define specific root files to include
$RootFiles = @(
    "package.json",
    "next.config.ts",
    "tsconfig.json",
    "tailwind.config.js",
    "postcss.config.mjs",
    "README.md",
    "PRD.md",
    "MVP.md"
)

# Dynamic File Discovery
$FilesToInclude = @()
$FilesToInclude += $RootFiles | ForEach-Object { Get-Item -Path $_ -ErrorAction SilentlyContinue }
foreach ($dir in $SourceDirs) {
    if (Test-Path $dir) {
        $FilesToInclude += Get-ChildItem -Path $dir -Recurse -Include $FileExtensions -ErrorAction SilentlyContinue
    }
}

$MarkdownContent = "# üîç Resume Maker Source Code Dump`n`n"
$MarkdownContent += "Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n`n"
$MarkdownContent += "## Project: Next.js Resume Generator with PDF Export`n`n"

foreach ($file in $FilesToInclude) {
    if ($file -and (Test-Path $file.FullName)) {
        $RelativeFilePath = $file.FullName.Substring($PSScriptRoot.Length + 1)
        $MarkdownContent += "`n## File: $RelativeFilePath`n`n"

        try {
            Write-Host "Processing: $RelativeFilePath" -ForegroundColor Green
            $FileContent = Get-Content -Path $file.FullName -Raw -ErrorAction Stop

            if ([string]::IsNullOrWhiteSpace($FileContent)) {
                $MarkdownContent += "*File is empty*`n"
                continue
            }

            $FileExtension = $file.Extension.TrimStart('.').ToLower()
            $LanguageSyntax = switch ($FileExtension) {
                { $_ -in @('ts', 'tsx') } { 'typescript' }
                'js'   { 'javascript' }
                'mjs'  { 'javascript' }
                'json' { 'json' }
                'md'   { 'markdown' }
                'css'  { 'css' }
                default { '' }
            }

            $MarkdownContent += "``````$LanguageSyntax`n"
            $MarkdownContent += $FileContent
            $MarkdownContent += "`n``````n`n"
        }
        catch {
            Write-Warning "Could not read file: '$RelativeFilePath'. Error: $($_.Exception.Message)"
            $MarkdownContent += "*Could not read file: $($_.Exception.Message)*`n`n"
        }
    }
}

# Add footer
$MarkdownContent += "`n---`n"
$MarkdownContent += "*Generated by Write-blah.ps1 for Resume Maker (Next.js + jsPDF)*`n"

try {
    $MarkdownContent | Out-File -FilePath $OutputFile -Encoding UTF8 -Force
    Write-Host "`n‚úÖ Success! Source code written to '$OutputFile'" -ForegroundColor Green
    Write-Host "üì¶ File size: $((Get-Item $OutputFile).Length) bytes" -ForegroundColor Cyan
    Write-Host "`nüìã Ready to share with LLM for debugging PDF export issues" -ForegroundColor Yellow
}
catch {
    Write-Error "‚ùå Failed to write output file '$OutputFile': $($_.Exception.Message)"
    exit 1
}
